import org.flywaydb.gradle.task.FlywayCleanTask

buildscript {
	ext {
		springBootVersion = '2.1.0.RELEASE'
        versionsPluginVersion = '0.20.0'
	}
	repositories {
		mavenCentral()
        jcenter()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("com.github.ben-manes:gradle-versions-plugin:${versionsPluginVersion}")
	}
}

plugins {
    id "org.flywaydb.flyway" version "5.2.1"
    id "com.gorylenko.gradle-git-properties" version "2.0.0-beta1"
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'jacoco'


group = 'com.openpf'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 11

repositories {
	mavenCentral()
}

configurations {
    flywayMigration
}

dependencies {
	implementation('org.springframework.boot:spring-boot-starter-actuator')
	implementation('org.springframework.boot:spring-boot-starter-web')
	implementation('org.springframework.boot:spring-boot-starter-data-jpa')

    compile('com.graphql-java-kickstart:graphql-spring-boot-starter:5.0.6')
    compile('com.graphql-java-kickstart:graphiql-spring-boot-starter:5.0.6')
    compile('org.flywaydb:flyway-core:5.2.1')

    runtimeOnly('org.postgresql:postgresql')
    flywayMigration('org.postgresql:postgresql')
    runtimeOnly('org.springframework.boot:spring-boot-devtools')

    testImplementation('org.junit.jupiter:junit-jupiter-api:5.3.1')
    testCompile('org.junit.jupiter:junit-jupiter-params:5.3.1')
    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.3.1')

    testCompile('org.mockito:mockito-core:2.23.0')
    testCompile('org.mockito:mockito-junit-jupiter:2.23.0')
    testCompile('com.graphql-java-kickstart:graphql-spring-boot-starter-test:5.0.6')

	testImplementation('org.springframework.boot:spring-boot-starter-test')
}

jacoco {
    toolVersion = '0.8.2'
}

gitProperties {
    keys = [
            'git.branch',
            'git.commit.id',
            'git.commit.time',
            'git.commit.id.abbrev',
            'git.dirty',
            'git.commit.message.short',
            'git.tags',
            'git.build.time',
            'git.build.version'
    ]
}

test {
    useJUnitPlatform {
        includeEngines 'junit-jupiter'
        excludeTags 'slow'
    }
}

task testIntegration(type: Test) {
    useJUnitPlatform {
        includeEngines 'junit-jupiter'
        includeTags 'slow'
    }
    jacoco {
        append = true
        destinationFile = file("$buildDir/jacoco/test.exec")
    }
    check.dependsOn it
    shouldRunAfter test
}

flyway {
    url = 'jdbc:postgresql://localhost:5432/opfdb'
    user = 'openpf'
    configurations = [ 'compile', 'flywayMigration' ]
}

task flywayCleanTestDB(type: FlywayCleanTask) {
    url = 'jdbc:postgresql://localhost:5432/opfdb_test'
    user = 'openpf'
}
